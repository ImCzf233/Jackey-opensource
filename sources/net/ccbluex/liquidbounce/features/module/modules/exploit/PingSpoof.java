package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.timer.TimeUtils;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C16PacketClientStatus;
import org.apache.log4j.Level;

@ModuleInfo(name = "PingSpoof", spacedName = "Ping Spoof", description = "Spoofs your ping to a given value.", category = ModuleCategory.EXPLOIT)
/* loaded from: Jackey Client b2.jar:net/ccbluex/liquidbounce/features/module/modules/exploit/PingSpoof.class */
public class PingSpoof extends Module {
    private final IntegerValue maxDelayValue = new IntegerValue("MaxDelay", 1000, 0, Level.TRACE_INT, "ms") { // from class: net.ccbluex.liquidbounce.features.module.modules.exploit.PingSpoof.1
        public void onChanged(Integer oldValue, Integer newValue) {
            int minDelayValue = PingSpoof.this.minDelayValue.get().intValue();
            if (minDelayValue > newValue.intValue()) {
                set((C16631) Integer.valueOf(minDelayValue));
            }
        }
    };
    private final IntegerValue minDelayValue = new IntegerValue("MinDelay", 500, 0, Level.TRACE_INT, "ms") { // from class: net.ccbluex.liquidbounce.features.module.modules.exploit.PingSpoof.2
        public void onChanged(Integer oldValue, Integer newValue) {
            int maxDelayValue = PingSpoof.this.maxDelayValue.get().intValue();
            if (maxDelayValue < newValue.intValue()) {
                set((C16642) Integer.valueOf(maxDelayValue));
            }
        }
    };
    private final HashMap<Packet<?>, Long> packetsMap = new HashMap<>();

    @Override // net.ccbluex.liquidbounce.features.module.Module
    public void onDisable() {
        this.packetsMap.clear();
    }

    @EventTarget
    public void onPacket(PacketEvent event) {
        Packet packet = event.getPacket();
        if (((packet instanceof C00PacketKeepAlive) || (packet instanceof C16PacketClientStatus)) && !f362mc.field_71439_g.field_70128_L && f362mc.field_71439_g.func_110143_aJ() > 0.0f && !this.packetsMap.containsKey(packet)) {
            event.cancelEvent();
            synchronized (this.packetsMap) {
                this.packetsMap.put(packet, Long.valueOf(System.currentTimeMillis() + TimeUtils.randomDelay(this.minDelayValue.get().intValue(), this.maxDelayValue.get().intValue())));
            }
        }
    }

    @EventTarget(ignoreCondition = true)
    public void onUpdate(UpdateEvent event) {
        try {
            synchronized (this.packetsMap) {
                Iterator<Map.Entry<Packet<?>, Long>> iterator = this.packetsMap.entrySet().iterator();
                while (iterator.hasNext()) {
                    Map.Entry<Packet<?>, Long> entry = iterator.next();
                    if (entry.getValue().longValue() < System.currentTimeMillis()) {
                        f362mc.func_147114_u().func_147297_a(entry.getKey());
                        iterator.remove();
                    }
                }
            }
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }
}
