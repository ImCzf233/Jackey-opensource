package net.ccbluex.liquidbounce.features.module.modules.exploit;

import com.viaversion.viaversion.libs.javassist.compiler.TokenId;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import jdk.nashorn.internal.runtime.linker.LinkerCallSite;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.RangesKt;
import kotlin.text.StringsKt;
import net.ccbluex.liquidbounce.LiquidBounce;
import net.ccbluex.liquidbounce.event.EventState;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MotionEvent;
import net.ccbluex.liquidbounce.event.Render2DEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.event.WorldEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.features.module.modules.combat.KillAura;
import net.ccbluex.liquidbounce.features.module.modules.movement.Fly;
import net.ccbluex.liquidbounce.features.module.modules.movement.Speed;
import net.ccbluex.liquidbounce.features.module.modules.movement.TargetStrafe;
import net.ccbluex.liquidbounce.p004ui.client.hud.element.elements.Notification;
import net.ccbluex.liquidbounce.p004ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.PacketUtils;
import net.ccbluex.liquidbounce.utils.PosLookInstance;
import net.ccbluex.liquidbounce.utils.Rotation;
import net.ccbluex.liquidbounce.utils.RotationUtils;
import net.ccbluex.liquidbounce.utils.ServerUtils;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.ccbluex.liquidbounce.utils.render.RenderUtils;
import net.ccbluex.liquidbounce.utils.render.Stencil;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.util.BlockPos;
import net.minecraft.util.Vec3;
import org.apache.log4j.Priority;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/* compiled from: Disabler.kt */
@Metadata(m51mv = {1, 6, 0}, m52k = 1, m49xi = 48, m54d1 = {"��È\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u0007\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\u0010\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n\u0002\b\u0011\n\u0002\u0010\u000e\n\u0002\b\u000e\n\u0002\u0010\u0006\n\u0002\b\u0006\n\u0002\u0010\u0002\n\u0002\b\u0005\n\u0002\u0010\n\n\u0002\b\u0005\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n��\n\u0002\u0018\u0002\n\u0002\b\u0002\b\u0007\u0018��2\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\u000e\u0010e\u001a\u00020f2\u0006\u0010g\u001a\u00020PJ\u000e\u0010h\u001a\u00020f2\u0006\u0010i\u001a\u00020\u0004J\u000e\u0010j\u001a\u00020\u00042\u0006\u0010k\u001a\u00020lJ\u0006\u0010m\u001a\u00020\u0004J\b\u0010n\u001a\u00020fH\u0016J\b\u0010o\u001a\u00020fH\u0016J\u0010\u0010p\u001a\u00020f2\u0006\u0010q\u001a\u00020rH\u0007J\u0010\u0010s\u001a\u00020f2\u0006\u0010q\u001a\u00020tH\u0007J\u0010\u0010u\u001a\u00020f2\u0006\u0010q\u001a\u00020vH\u0007J\u0010\u0010w\u001a\u00020f2\u0006\u0010q\u001a\u00020xH\u0007J\u0010\u0010y\u001a\u00020f2\u0006\u0010q\u001a\u00020zH\u0007J\u0006\u0010{\u001a\u00020\u0004R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010\u0005\u001a\u00020\u0004X\u0082\u000e¢\u0006\u0002\n��R\u0014\u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\b0\u0007X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010\t\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010\u000b\u001a\u00020\u0004X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010\f\u001a\u00020\rX\u0082\u0004¢\u0006\u0002\n��R\u0011\u0010\u000e\u001a\u00020\u00048F¢\u0006\u0006\u001a\u0004\b\u000f\u0010\u0010R\u0011\u0010\u0011\u001a\u00020\u00048F¢\u0006\u0006\u001a\u0004\b\u0012\u0010\u0010R\u000e\u0010\u0013\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010\u0014\u001a\u00020\u0015X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010\u0016\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010\u0017\u001a\u00020\u0004X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010\u0018\u001a\u00020\u0019X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010\u001a\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010\u001b\u001a\u00020\u001cX\u0082\u0004¢\u0006\u0002\n��R\u0010\u0010\u001d\u001a\u0004\u0018\u00010\u001eX\u0082\u000e¢\u0006\u0002\n��R\u001e\u0010\u001f\u001a\u0012\u0012\u0004\u0012\u00020\b0 j\b\u0012\u0004\u0012\u00020\b`!X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010\"\u001a\u00020\u0015X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010#\u001a\u00020\u0015X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010$\u001a\u00020%X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010&\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010'\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010(\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010)\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010*\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010+\u001a\u00020\u001cX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010,\u001a\u00020\u001cX\u0082\u0004¢\u0006\u0002\n��R\u0011\u0010-\u001a\u00020\u0019¢\u0006\b\n��\u001a\u0004\b.\u0010/R\u000e\u00100\u001a\u00020\rX\u0082\u0004¢\u0006\u0002\n��R\u000e\u00101\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u00102\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R6\u00103\u001a*\u0012\u0004\u0012\u000205\u0012\n\u0012\b\u0012\u0004\u0012\u0002070604j\u0014\u0012\u0004\u0012\u000205\u0012\n\u0012\b\u0012\u0004\u0012\u00020706`8X\u0082\u0004¢\u0006\u0002\n��R\u0014\u00109\u001a\b\u0012\u0004\u0012\u00020:0\u0007X\u0082\u0004¢\u0006\u0002\n��R\u0014\u0010;\u001a\b\u0012\u0004\u0012\u00020<0\u0007X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010=\u001a\u00020>X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010?\u001a\u00020\u0019X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010@\u001a\u00020\u0019X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010A\u001a\u00020\u001cX\u0082\u0004¢\u0006\u0002\n��R\u001a\u0010B\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u000207060\u0007X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010C\u001a\u00020\u0015X\u0082\u000e¢\u0006\u0002\n��R\u0011\u0010D\u001a\u00020\n¢\u0006\b\n��\u001a\u0004\bE\u0010FR\u000e\u0010G\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010H\u001a\u00020\u0015X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010I\u001a\u00020\u0015X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010J\u001a\u00020\u0004X\u0082\u000e¢\u0006\u0002\n��R\u001a\u0010K\u001a\u00020\u0004X\u0086\u000e¢\u0006\u000e\n��\u001a\u0004\bL\u0010\u0010\"\u0004\bM\u0010NR\u0014\u0010O\u001a\u00020P8VX\u0096\u0004¢\u0006\u0006\u001a\u0004\bQ\u0010RR\u000e\u0010S\u001a\u00020\u001cX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010T\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010U\u001a\u00020\u0015X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010V\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010W\u001a\u00020\u0015X\u0082\u000e¢\u0006\u0002\n��R\u001e\u0010X\u001a\u0012\u0012\u0004\u0012\u00020:0 j\b\u0012\u0004\u0012\u00020:`!X\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010Y\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010Z\u001a\u00020\u001cX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010[\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010\\\u001a\u00020\u001cX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010]\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010^\u001a\u00020_X\u0082\u000e¢\u0006\u0002\n��R\u000e\u0010`\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010a\u001a\u00020\u001cX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010b\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010c\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n��R\u000e\u0010d\u001a\u00020\rX\u0082\u0004¢\u0006\u0002\n��¨\u0006|"}, m53d2 = {"Lnet/ccbluex/liquidbounce/features/module/modules/exploit/Disabler;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "alrSendY", "", "alrSprint", "anotherQueue", "Ljava/util/LinkedList;", "Lnet/minecraft/network/play/client/C00PacketKeepAlive;", "autoAlert", "Lnet/ccbluex/liquidbounce/value/BoolValue;", "benHittingLean", "benTimer", "Lnet/ccbluex/liquidbounce/utils/timer/MSTimer;", "canModifyRotation", "getCanModifyRotation", "()Z", "canRenderInto3D", "getCanRenderInto3D", "checkValid", "counter", "", "debugValue", "expectedSetback", "flagMode", "Lnet/ccbluex/liquidbounce/value/ListValue;", "flagSilent", "flagTick", "Lnet/ccbluex/liquidbounce/value/IntegerValue;", "initPos", "Lnet/minecraft/util/Vec3;", "keepAlives", "Ljava/util/ArrayList;", "Lkotlin/collections/ArrayList;", "lastTick", "lastUid", "lastYaw", "", "matrixHotbarChange", "matrixMoveFix", "matrixMoveOnly", "matrixNoCheck", "matrixNoMovePacket", "maxpsf", "minpsf", "modeValue", "getModeValue", "()Lnet/ccbluex/liquidbounce/value/ListValue;", "msTimer", "noC03s", "noMoveKeepRot", "packetBus", "Ljava/util/HashMap;", "", "Lnet/minecraft/network/Packet;", "Lnet/minecraft/network/play/INetHandlerPlayServer;", "Lkotlin/collections/HashMap;", "packetQueue", "Lnet/minecraft/network/play/client/C0FPacketConfirmTransaction;", "playerQueue", "Lnet/minecraft/network/play/client/C03PacketPlayer;", "posLookInstance", "Lnet/ccbluex/liquidbounce/utils/PosLookInstance;", "psfSendMode", "psfStartSendMode", "psfWorldDelay", "queueBus", "randDelay", "renderServer", "getRenderServer", "()Lnet/ccbluex/liquidbounce/value/BoolValue;", "rotModify", "s08count", "sendDelay", "shouldActive", "shouldModifyRotation", "getShouldModifyRotation", "setShouldModifyRotation", "(Z)V", "tag", "", "getTag", "()Ljava/lang/String;", "testDelay", "testFeature", "ticking", "tifality90", "transCount", "transactions", "verusAntiFlyCheck", "verusBufferSizeValue", "verusFakeInput", "verusFlagDelayValue", "verusFlagValue", "verusLastY", "", "verusLobbyValue", "verusPurseDelayValue", "verusSlientFlagApplyValue", "verusValidPos", "wdTimer", "debug", "", "s", "flush", "check", "isInventory", "action", "", "isMoving", "onDisable", "onEnable", "onMotion", "event", "Lnet/ccbluex/liquidbounce/event/MotionEvent;", "onPacket", "Lnet/ccbluex/liquidbounce/event/PacketEvent;", "onRender2D", "Lnet/ccbluex/liquidbounce/event/Render2DEvent;", "onUpdate", "Lnet/ccbluex/liquidbounce/event/UpdateEvent;", "onWorld", "Lnet/ccbluex/liquidbounce/event/WorldEvent;", "shouldRun", "LiquidBounce"})
@ModuleInfo(name = "Disabler", description = "Disable some anticheats' checks.", category = ModuleCategory.EXPLOIT)
/* loaded from: Jackey Client b2.jar:net/ccbluex/liquidbounce/features/module/modules/exploit/Disabler.class */
public final class Disabler extends Module {
    private boolean alrSendY;
    private boolean alrSprint;
    private boolean expectedSetback;
    private int sendDelay;
    private boolean shouldActive;
    private boolean benHittingLean;
    private int transCount;
    private int counter;
    private boolean shouldModifyRotation;
    private double verusLastY;
    private int lastTick;
    private int s08count;
    private int ticking;
    private float lastYaw;
    private int lastUid;
    @Nullable
    private Vec3 initPos;
    @NotNull
    private final ListValue modeValue = new ListValue("Mode", new String[]{"SpartanCombat", "MatrixGeyser", "OldVerus", "LatestVerus", "PingSpoof", "Flag", "Matrix", "Watchdog", "RotDesync"}, "SpartanCombat");
    @NotNull
    private final IntegerValue minpsf = new IntegerValue(new Disabler$minpsf$2(this)) { // from class: net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler$minpsf$1
        @Override // net.ccbluex.liquidbounce.value.Value
        public /* bridge */ /* synthetic */ void onChanged(Integer num, Integer num2) {
            onChanged(num.intValue(), num2.intValue());
        }

        protected void onChanged(int oldValue, int newValue) {
            IntegerValue integerValue;
            integerValue = Disabler.this.maxpsf;
            int v = integerValue.get().intValue();
            if (v < newValue) {
                set((Disabler$minpsf$1) Integer.valueOf(v));
            }
        }
    };
    @NotNull
    private final IntegerValue maxpsf = new IntegerValue(new Disabler$maxpsf$2(this)) { // from class: net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler$maxpsf$1
        @Override // net.ccbluex.liquidbounce.value.Value
        public /* bridge */ /* synthetic */ void onChanged(Integer num, Integer num2) {
            onChanged(num.intValue(), num2.intValue());
        }

        protected void onChanged(int oldValue, int newValue) {
            IntegerValue integerValue;
            integerValue = Disabler.this.minpsf;
            int v = integerValue.get().intValue();
            if (v > newValue) {
                set((Disabler$maxpsf$1) Integer.valueOf(v));
            }
        }
    };
    @NotNull
    private final ListValue psfStartSendMode = new ListValue("PingSpoof-StartSendMode", new String[]{"All", "First"}, "All", new Disabler$psfStartSendMode$1(this));
    @NotNull
    private final ListValue psfSendMode = new ListValue("PingSpoof-SendMode", new String[]{"All", "First"}, "All", new Disabler$psfSendMode$1(this));
    @NotNull
    private final IntegerValue psfWorldDelay = new IntegerValue("PingSpoof-WorldDelay", 15000, 0, Priority.WARN_INT, "ms", new Disabler$psfWorldDelay$1(this));
    @NotNull
    private final ListValue flagMode = new ListValue("Flag-Mode", new String[]{"Edit", "Packet"}, "Edit", new Disabler$flagMode$1(this));
    @NotNull
    private final IntegerValue flagTick = new IntegerValue("Flag-TickDelay", 25, 1, 200, new Disabler$flagTick$1(this));
    @NotNull
    private final BoolValue flagSilent = new BoolValue("Flag-SilentMode", true, new Disabler$flagSilent$1(this));
    @NotNull
    private final BoolValue matrixNoCheck = new BoolValue("Matrix-NoModuleCheck", false, new Disabler$matrixNoCheck$1(this));
    @NotNull
    private final BoolValue matrixMoveFix = new BoolValue("Matrix-MoveFix", true, new Disabler$matrixMoveFix$1(this));
    @NotNull
    private final BoolValue matrixMoveOnly = new BoolValue("Matrix-MoveOnly", false, new Disabler$matrixMoveOnly$1(this));
    @NotNull
    private final BoolValue matrixNoMovePacket = new BoolValue("Matrix-NoMovePacket", true, new Disabler$matrixNoMovePacket$1(this));
    @NotNull
    private final BoolValue matrixHotbarChange = new BoolValue("Matrix-HotbarChange", true, new Disabler$matrixHotbarChange$1(this));
    @NotNull
    private final BoolValue verusLobbyValue = new BoolValue("LobbyCheck", true, new Disabler$verusLobbyValue$1(this));
    @NotNull
    private final BoolValue verusFlagValue = new BoolValue("Verus-Flag", true, new Disabler$verusFlagValue$1(this));
    @NotNull
    private final BoolValue verusSlientFlagApplyValue = new BoolValue("Verus-SlientFlagApply", false, new Disabler$verusSlientFlagApplyValue$1(this));
    @NotNull
    private final IntegerValue verusBufferSizeValue = new IntegerValue("Verus-QueueActiveSize", (int) TokenId.ABSTRACT, 0, 1000, new Disabler$verusBufferSizeValue$1(this));
    @NotNull
    private final IntegerValue verusPurseDelayValue = new IntegerValue("Verus-PurseDelay", 490, 0, 2000, "ms", new Disabler$verusPurseDelayValue$1(this));
    @NotNull
    private final IntegerValue verusFlagDelayValue = new IntegerValue("Verus-FlagDelay", 40, 40, 120, " tick", new Disabler$verusFlagDelayValue$1(this));
    @NotNull
    private final BoolValue verusAntiFlyCheck = new BoolValue("Verus-AntiFly", true, new Disabler$verusAntiFlyCheck$1(this));
    @NotNull
    private final BoolValue verusFakeInput = new BoolValue("Verus-FakeInput", true, new Disabler$verusFakeInput$1(this));
    @NotNull
    private final BoolValue verusValidPos = new BoolValue("Verus-ValidPosition", true, new Disabler$verusValidPos$1(this));
    @NotNull
    private final BoolValue renderServer = new BoolValue("Render-ServerSide", false, new Disabler$renderServer$1(this));
    @NotNull
    private final BoolValue autoAlert = new BoolValue("BanAlert", false, new Disabler$autoAlert$1(this));
    @NotNull
    private final BoolValue rotModify = new BoolValue("RotationModifier", false, new Disabler$rotModify$1(this));
    @NotNull
    private final BoolValue tifality90 = new BoolValue("Tifality", false, new Disabler$tifality90$1(this));
    @NotNull
    private final BoolValue noMoveKeepRot = new BoolValue("NoMoveKeepRot", true, new Disabler$noMoveKeepRot$1(this));
    @NotNull
    private final BoolValue noC03s = new BoolValue("NoC03s", true, new Disabler$noC03s$1(this));
    @NotNull
    private final BoolValue testFeature = new BoolValue("PingSpoof", false, new Disabler$testFeature$1(this));
    @NotNull
    private final IntegerValue testDelay = new IntegerValue("Delay", TokenId.Identifier, 0, 1000, "ms", new Disabler$testDelay$1(this));
    @NotNull
    private final BoolValue checkValid = new BoolValue("InvValidate", false, new Disabler$checkValid$1(this));
    @NotNull
    private final BoolValue debugValue = new BoolValue("Debug", false);
    @NotNull
    private final ArrayList<C00PacketKeepAlive> keepAlives = new ArrayList<>();
    @NotNull
    private final ArrayList<C0FPacketConfirmTransaction> transactions = new ArrayList<>();
    @NotNull
    private final LinkedList<C0FPacketConfirmTransaction> packetQueue = new LinkedList<>();
    @NotNull
    private final LinkedList<C00PacketKeepAlive> anotherQueue = new LinkedList<>();
    @NotNull
    private final LinkedList<C03PacketPlayer> playerQueue = new LinkedList<>();
    @NotNull
    private final HashMap<Long, Packet<INetHandlerPlayServer>> packetBus = new HashMap<>();
    @NotNull
    private final LinkedList<Packet<INetHandlerPlayServer>> queueBus = new LinkedList<>();
    @NotNull
    private final PosLookInstance posLookInstance = new PosLookInstance();
    @NotNull
    private final MSTimer msTimer = new MSTimer();
    @NotNull
    private final MSTimer wdTimer = new MSTimer();
    @NotNull
    private final MSTimer benTimer = new MSTimer();
    private int randDelay = LinkerCallSite.ARGLIMIT;

    @NotNull
    public final ListValue getModeValue() {
        return this.modeValue;
    }

    @NotNull
    public final BoolValue getRenderServer() {
        return this.renderServer;
    }

    public final boolean getShouldModifyRotation() {
        return this.shouldModifyRotation;
    }

    public final void setShouldModifyRotation(boolean z) {
        this.shouldModifyRotation = z;
    }

    public final boolean getCanModifyRotation() {
        return getState() && StringsKt.equals(this.modeValue.get(), "watchdog", true) && this.shouldModifyRotation;
    }

    public final boolean getCanRenderInto3D() {
        return getState() && StringsKt.equals(this.modeValue.get(), "watchdog", true) && this.renderServer.get().booleanValue() && this.shouldModifyRotation;
    }

    public final boolean isMoving() {
        if (MinecraftInstance.f362mc.field_71439_g != null) {
            if (MinecraftInstance.f362mc.field_71439_g.field_71158_b.field_78900_b == 0.0f) {
                if (!(MinecraftInstance.f362mc.field_71439_g.field_71158_b.field_78902_a == 0.0f) || MinecraftInstance.f362mc.field_71439_g.field_71158_b.field_78899_d || MinecraftInstance.f362mc.field_71439_g.field_71158_b.field_78901_c) {
                }
            }
            return true;
        }
        return false;
    }

    public final void debug(@NotNull String s) {
        Intrinsics.checkNotNullParameter(s, "s");
        if (this.debugValue.get().booleanValue()) {
            ClientUtils.displayChatMessage(Intrinsics.stringPlus("§7[§3§lDisabler§7]§f ", s));
        }
    }

    public final boolean shouldRun() {
        return (MinecraftInstance.f362mc.field_71439_g == null || MinecraftInstance.f362mc.field_71439_g.field_71071_by == null || (this.verusLobbyValue.get().booleanValue() && MinecraftInstance.f362mc.field_71439_g.field_71071_by.func_146028_b(Items.field_151111_aL)) || MinecraftInstance.f362mc.field_71439_g.field_70173_aa <= 5) ? false : true;
    }

    public final boolean isInventory(short action) {
        return action > 0 && action < 100;
    }

    @Override // net.ccbluex.liquidbounce.features.module.Module
    @NotNull
    public String getTag() {
        return this.modeValue.get();
    }

    @Override // net.ccbluex.liquidbounce.features.module.Module
    public void onEnable() {
        this.keepAlives.clear();
        this.transactions.clear();
        this.packetQueue.clear();
        this.anotherQueue.clear();
        this.playerQueue.clear();
        this.packetBus.clear();
        this.queueBus.clear();
        this.s08count = 0;
        this.msTimer.reset();
        this.wdTimer.reset();
        this.benTimer.reset();
        this.expectedSetback = false;
        this.shouldActive = false;
        this.alrSendY = false;
        this.alrSprint = false;
        this.transCount = 0;
        this.lastTick = 0;
        this.ticking = 0;
        this.lastUid = 0;
        this.posLookInstance.reset();
        this.shouldModifyRotation = false;
        this.benHittingLean = false;
    }

    @Override // net.ccbluex.liquidbounce.features.module.Module
    public void onDisable() {
        Iterable $this$forEach$iv = this.keepAlives;
        for (Object element$iv : $this$forEach$iv) {
            PacketUtils.sendPacketNoEvent((C00PacketKeepAlive) element$iv);
        }
        Iterable $this$forEach$iv2 = this.transactions;
        for (Object element$iv2 : $this$forEach$iv2) {
            PacketUtils.sendPacketNoEvent((C0FPacketConfirmTransaction) element$iv2);
        }
        this.keepAlives.clear();
        this.transactions.clear();
        this.packetQueue.clear();
        this.anotherQueue.clear();
        this.packetBus.clear();
        if (StringsKt.equals(this.modeValue.get(), "watchdog", true)) {
            Iterable $this$forEach$iv3 = this.anotherQueue;
            for (Object element$iv3 : $this$forEach$iv3) {
                PacketUtils.sendPacketNoEvent((C00PacketKeepAlive) element$iv3);
            }
            Iterable $this$forEach$iv4 = this.packetQueue;
            for (Object element$iv4 : $this$forEach$iv4) {
                PacketUtils.sendPacketNoEvent((C0FPacketConfirmTransaction) element$iv4);
            }
        }
        if (StringsKt.equals(this.modeValue.get(), "pingspoof", true)) {
            Iterator<Packet<INetHandlerPlayServer>> it = this.queueBus.iterator();
            while (it.hasNext()) {
                Packet p = it.next();
                PacketUtils.sendPacketNoEvent(p);
            }
        }
        this.queueBus.clear();
        this.msTimer.reset();
        MinecraftInstance.f362mc.field_71439_g.field_70181_x = 0.0d;
        MovementUtils.strafe(0.0f);
        MinecraftInstance.f362mc.field_71428_T.field_74278_d = 1.0f;
        this.shouldModifyRotation = false;
    }

    @EventTarget
    public final void onWorld(@NotNull WorldEvent event) {
        Intrinsics.checkNotNullParameter(event, "event");
        this.transactions.clear();
        this.keepAlives.clear();
        this.packetQueue.clear();
        this.anotherQueue.clear();
        this.playerQueue.clear();
        this.packetBus.clear();
        this.queueBus.clear();
        this.s08count = 0;
        this.msTimer.reset();
        this.wdTimer.reset();
        this.benTimer.reset();
        this.expectedSetback = false;
        this.shouldActive = false;
        this.alrSendY = false;
        this.alrSprint = false;
        this.benHittingLean = false;
        this.transCount = 0;
        this.counter = 0;
        this.lastTick = 0;
        this.ticking = 0;
        this.lastUid = 0;
        this.posLookInstance.reset();
    }

    @EventTarget
    public final void onRender2D(@NotNull Render2DEvent event) {
        Intrinsics.checkNotNullParameter(event, "event");
        if (!this.shouldActive) {
            ScaledResolution sc = new ScaledResolution(MinecraftInstance.f362mc);
            float strength = RangesKt.coerceIn(((float) this.msTimer.hasTimeLeft(this.psfWorldDelay.get().intValue())) / this.psfWorldDelay.get().intValue(), 0.0f, 1.0f);
            if (StringsKt.equals(this.modeValue.get(), "pingspoof", true)) {
                Stencil.write(true);
                RenderUtils.drawRoundedRect((sc.func_78326_a() / 2.0f) - 50.0f, 35.0f, (sc.func_78326_a() / 2.0f) + 50.0f, 55.0f, 10.0f, new Color(0, 0, 0, 140).getRGB());
                Stencil.erase(true);
                RenderUtils.drawRect((sc.func_78326_a() / 2.0f) - 50.0f, 35.0f, ((sc.func_78326_a() / 2.0f) - 50.0f) + (100.0f * strength), 55.0f, new Color(0, 111, 255, 70).getRGB());
                Stencil.dispose();
                Fonts.font40.drawCenteredString(((int) (((float) this.msTimer.hasTimeLeft(this.psfWorldDelay.get().intValue())) / 1000.0f)) + "s left...", sc.func_78326_a() / 2.0f, 41.0f, -1);
            }
            if (StringsKt.equals(this.modeValue.get(), "watchdog", true) && this.testFeature.get().booleanValue() && !ServerUtils.isHypixelLobby()) {
                RenderUtils.drawRect((sc.func_78326_a() / 2.0f) - 50.0f, 60.0f, (sc.func_78326_a() / 2.0f) + 50.0f, 72.0f, new Color(0, 0, 0, 140).getRGB());
                Fonts.font40.drawCenteredString("Please wait...", sc.func_78326_a() / 2.0f, 62.0f, new Color(220, 220, 50).getRGB());
            }
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockSplitter
        jadx.core.utils.exceptions.JadxRuntimeException: Unexpected missing predecessor for block: B:38:0x011c
        	at jadx.core.dex.visitors.blocks.BlockSplitter.addTempConnectionsForExcHandlers(BlockSplitter.java:240)
        	at jadx.core.dex.visitors.blocks.BlockSplitter.visit(BlockSplitter.java:54)
        */
    @net.ccbluex.liquidbounce.event.EventTarget
    public final void onPacket(@org.jetbrains.annotations.NotNull net.ccbluex.liquidbounce.event.PacketEvent r13) {
        /*
            Method dump skipped, instructions count: 2932
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.onPacket(net.ccbluex.liquidbounce.event.PacketEvent):void");
    }

    public final void flush(boolean check) {
        if (StringsKt.equals(check ? this.psfSendMode.get() : this.psfStartSendMode.get(), "all", true)) {
            while (this.queueBus.size() > 0) {
                PacketUtils.sendPacketNoEvent(this.queueBus.poll());
            }
            return;
        }
        PacketUtils.sendPacketNoEvent(this.queueBus.poll());
    }

    @EventTarget(priority = 2)
    public final void onMotion(@NotNull MotionEvent event) {
        Intrinsics.checkNotNullParameter(event, "event");
        Module module = LiquidBounce.INSTANCE.getModuleManager().getModule(KillAura.class);
        Intrinsics.checkNotNull(module);
        KillAura killAura = (KillAura) module;
        Module module2 = LiquidBounce.INSTANCE.getModuleManager().getModule(Speed.class);
        Intrinsics.checkNotNull(module2);
        Speed speed = (Speed) module2;
        Module module3 = LiquidBounce.INSTANCE.getModuleManager().getModule(Fly.class);
        Intrinsics.checkNotNull(module3);
        Fly fly = (Fly) module3;
        Module module4 = LiquidBounce.INSTANCE.getModuleManager().getModule(TargetStrafe.class);
        Intrinsics.checkNotNull(module4);
        TargetStrafe targetStrafe = (TargetStrafe) module4;
        if (event.getEventState() == EventState.PRE) {
            this.shouldModifyRotation = false;
        }
        if (StringsKt.equals(this.modeValue.get(), "watchdog", true) && event.getEventState() == EventState.PRE) {
            if ((speed.getState() || fly.getState()) && this.rotModify.get().booleanValue()) {
                this.shouldModifyRotation = true;
                if (MovementUtils.isMoving()) {
                    float cYaw = targetStrafe.getCanStrafe() ? MovementUtils.getPredictionYaw(event.getX(), event.getZ()) - 90.0f : MovementUtils.getRawDirection(event.getYaw());
                    this.lastYaw = cYaw;
                    event.setYaw(cYaw);
                    if (this.tifality90.get().booleanValue()) {
                        event.setPitch(90.0f);
                    }
                    RotationUtils.setTargetRotation(new Rotation(cYaw, this.tifality90.get().booleanValue() ? 90.0f : event.getPitch()));
                } else if (this.noMoveKeepRot.get().booleanValue()) {
                    event.setYaw(this.lastYaw);
                    if (this.tifality90.get().booleanValue()) {
                        event.setPitch(90.0f);
                    }
                    RotationUtils.setTargetRotation(new Rotation(this.lastYaw, this.tifality90.get().booleanValue() ? 90.0f : event.getPitch()));
                }
            }
            if (MinecraftInstance.f362mc.func_71356_B()) {
                return;
            }
            if (this.testFeature.get().booleanValue() && !ServerUtils.isHypixelLobby() && this.shouldActive && this.wdTimer.hasTimePassed(this.testDelay.get().intValue())) {
                while (!this.anotherQueue.isEmpty()) {
                    PacketUtils.sendPacketNoEvent(this.anotherQueue.poll());
                    debug(Intrinsics.stringPlus("c00, ", Integer.valueOf(this.anotherQueue.size())));
                }
                while (!this.packetQueue.isEmpty()) {
                    PacketUtils.sendPacketNoEvent(this.packetQueue.poll());
                    debug(Intrinsics.stringPlus("c0f, ", Integer.valueOf(this.packetQueue.size())));
                }
            }
        }
        if (event.getEventState() == EventState.POST) {
            if ((!this.matrixMoveOnly.get().booleanValue() || isMoving()) && StringsKt.equals(this.modeValue.get(), "matrix", true)) {
                if (!this.matrixNoCheck.get().booleanValue()) {
                    Module module5 = LiquidBounce.INSTANCE.getModuleManager().getModule(Fly.class);
                    Intrinsics.checkNotNull(module5);
                    if (!module5.getState()) {
                        Module module6 = LiquidBounce.INSTANCE.getModuleManager().getModule(Speed.class);
                        Intrinsics.checkNotNull(module6);
                        if (!module6.getState()) {
                            return;
                        }
                    }
                }
                boolean changed = false;
                if (this.matrixHotbarChange.get().booleanValue()) {
                    int i = 0;
                    while (true) {
                        if (i >= 9) {
                            break;
                        }
                        int i2 = i;
                        i++;
                        if (MinecraftInstance.f362mc.field_71439_g.field_71071_by.field_70462_a[i2] == null && i2 != MinecraftInstance.f362mc.field_71439_g.field_71071_by.field_70461_c) {
                            PacketUtils.sendPacketNoEvent(new C09PacketHeldItemChange(i2));
                            changed = true;
                            debug("found empty slot " + i2 + ", switching");
                            break;
                        }
                    }
                }
                PacketUtils.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(MinecraftInstance.f362mc.field_71439_g.field_70165_t, MinecraftInstance.f362mc.field_71439_g.field_70163_u, MinecraftInstance.f362mc.field_71439_g.field_70161_v, RotationUtils.serverRotation.getYaw(), RotationUtils.serverRotation.getPitch(), MinecraftInstance.f362mc.field_71439_g.field_70122_E));
                MinecraftInstance.f362mc.func_147114_u().func_147297_a(new C08PacketPlayerBlockPlacement(new BlockPos(-1, -1, -1), -1, (ItemStack) null, 0.0f, 0.0f, 0.0f));
                debug("sent placement");
                if (changed) {
                    PacketUtils.sendPacketNoEvent(new C09PacketHeldItemChange(MinecraftInstance.f362mc.field_71439_g.field_71071_by.field_70461_c));
                    debug("switched back");
                }
            }
        }
    }

    @EventTarget
    public final void onUpdate(@NotNull UpdateEvent event) {
        Intrinsics.checkNotNullParameter(event, "event");
        String lowerCase = this.modeValue.get().toLowerCase();
        Intrinsics.checkNotNullExpressionValue(lowerCase, "this as java.lang.String).toLowerCase()");
        switch (lowerCase.hashCode()) {
            case -1418649017:
                if (lowerCase.equals("spartancombat") && this.msTimer.hasTimePassed(3000L) && this.keepAlives.size() > 0 && this.transactions.size() > 0) {
                    PacketUtils.sendPacketNoEvent(this.keepAlives.get(this.keepAlives.size() - 1));
                    PacketUtils.sendPacketNoEvent(this.transactions.get(this.transactions.size() - 1));
                    debug("c00 no." + (this.keepAlives.size() - 1) + " sent.");
                    debug("c0f no." + (this.transactions.size() - 1) + " sent.");
                    this.keepAlives.clear();
                    this.transactions.clear();
                    this.msTimer.reset();
                    return;
                }
                return;
            case -360334121:
                if (lowerCase.equals("pingspoof")) {
                    if (this.msTimer.hasTimePassed(this.psfWorldDelay.get().intValue()) && !this.shouldActive) {
                        this.shouldActive = true;
                        this.sendDelay = RandomUtils.nextInt(this.minpsf.get().intValue(), this.maxpsf.get().intValue());
                        if (this.queueBus.size() > 0) {
                            flush(false);
                        }
                        this.msTimer.reset();
                        debug("activated. expected next delay: " + this.sendDelay + "ms");
                    }
                    if (this.shouldActive && this.msTimer.hasTimePassed(this.sendDelay) && !this.queueBus.isEmpty()) {
                        flush(true);
                        this.sendDelay = RandomUtils.nextInt(this.minpsf.get().intValue(), this.maxpsf.get().intValue());
                        this.msTimer.reset();
                        debug("expected next delay: " + this.sendDelay + "ms");
                        return;
                    }
                    return;
                }
                return;
            case 3145580:
                if (lowerCase.equals("flag") && StringsKt.equals(this.flagMode.get(), "packet", true) && MinecraftInstance.f362mc.field_71439_g.field_70173_aa > 0 && MinecraftInstance.f362mc.field_71439_g.field_70173_aa % this.flagTick.get().intValue() == 0) {
                    PacketUtils.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.f362mc.field_71439_g.field_70165_t, -0.08d, MinecraftInstance.f362mc.field_71439_g.field_70161_v, MinecraftInstance.f362mc.field_71439_g.field_70122_E));
                    debug("flagged");
                    return;
                }
                return;
            case 219581370:
                if (lowerCase.equals("oldverus") && MinecraftInstance.f362mc.field_71439_g.field_70173_aa % 180 == 0) {
                    while (this.packetQueue.size() > 22) {
                        PacketUtils.sendPacketNoEvent(this.packetQueue.poll());
                    }
                    debug("pushed queue until size < 22.");
                    return;
                }
                return;
            case 456492634:
                if (lowerCase.equals("latestverus")) {
                    if (this.verusAntiFlyCheck.get().booleanValue() && !this.shouldActive) {
                        Module flyMod = LiquidBounce.INSTANCE.getModuleManager().get(Fly.class);
                        Intrinsics.checkNotNull(flyMod);
                        if (flyMod.getState()) {
                            flyMod.setState(false);
                            LiquidBounce.INSTANCE.getHud().addNotification(new Notification("You can't fly before successful activation.", Notification.Type.WARNING));
                            debug("no fly allowed");
                        }
                    }
                    if (MinecraftInstance.f362mc.field_71439_g.field_70173_aa % 15 == 0 && shouldRun() && this.verusFakeInput.get().booleanValue()) {
                        MinecraftInstance.f362mc.func_147114_u().func_147297_a(new C0CPacketInput(RangesKt.coerceAtMost(MinecraftInstance.f362mc.field_71439_g.field_70702_br, 0.98f), RangesKt.coerceAtMost(MinecraftInstance.f362mc.field_71439_g.field_70701_bs, 0.98f), MinecraftInstance.f362mc.field_71439_g.field_71158_b.field_78901_c, MinecraftInstance.f362mc.field_71439_g.field_71158_b.field_78899_d));
                        debug("c0c");
                        return;
                    }
                    return;
                }
                return;
            default:
                return;
        }
    }
}
